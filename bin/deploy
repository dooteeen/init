#!/bin/bash
PKGLIST=$HOME/etc/install_packages.list
DOTFILES=$HOME/.config/dotfiles

executable() {
    which $1 >/dev/null 2>&1
    return $?
}

executable_fn() {
    [ "$(type -t $1)" = "function" ]
    return $?
}

check_dependencies() {
    # arg 1: command name
    if executable $1; then
        return 0
    else
        echo "Error: require $1"
        return 1
    fi
}

check_wheel() {
    [ "$(whoami)" = 'root' ] && return 0
    if test groups | grep -qv -e 'wheel' -e 'sudo'; then
        echo "Warning: This user can't use 'sudo'."
        return 1
    else
        return 0
    fi
}

append_sudo() {
    [ "$(whoami)" = 'root' ] && : || echo -n 'sudo'
}

dl_file() {
    if executable curl; then
        curl $1 -o $2
        return $?
    fi

    if executable wget; then
        wget $1 -O $2
        return $?
    fi

    echo "Error: any downloader has not exist."
    return 1
}

to_lower() {
    tr '[:upper:]' '[:lower:]'
}

detect_os() {
    [ -e /data/data/com.termux/files/home ] \
        && echo "android" \
        || sed -n 's/^ID=\(.*\)$/\1/p' /etc/os-release | to_lower
}

detect_os_base() {
    [ -e /data/data/com.termux/files/home ] \
        && echo "android" \
        || sed -n 's/^ID_LIKE=\(.*\)$/\1/p' /etc/os-release | to_lower
}

os_package_manager() {
    case "$(detect_os_base)" in
        "arch")
            printf 'pacman'
            ;;
        "debian")
            printf 'apt'
            ;;
        "android")
            printf 'pkg'
            ;;
        "*")
            return 0
            ;;
    esac
}

extra_package_managers() {
    CMDS=()
    case "$(detect_os)" in
        "manjaro")
            CMDS+=("yay")
            ;;
        "ubuntu")
            CMDS+=("brew" "snap")
            ;;
        "*")
            return 0
            ;;
    esac

    RESULT=()
    for cmd in "${CMDS[@]}"; do
        if executable $cmd; then
            RESULT+=("$cmd")
        fi
    done
    printf ${RESULT[@]}
}

install_packages_with() {
    cmd="install_with_$1"
    pkg=$(get_packages $1)

    if [ -z "$1" ]; then
        echo "Warning: cannot detect package manager."
        return 1
    elif [ $(executable $1; echo $?) -ne 0 ]; then
        echo "Note: $1 has not installed."
        echo "      Skip installing with $1."
        return 1
    elif [ $(executable_fn $cmd; echo $?) -ne 0 ]; then
        echo "Note: $1 is unregisted package manager."
        echo "      Skip installing with $1."
        return 1
    elif [ -z "$pkg" ]; then
        echo "Note: cannot find packages which are installed by $1."
        echo "      Skip installing with $1."
        return 1
    fi

    install_with_$1 $(get_packages $1)
}

install_with_pacman() {
    # args: packages
    check_wheel
    if [ $? -ne 0 ]; then
        echo "Skip installing with pacman."
        return 0
    fi
    yes '' | $(append_sudo) pacman -Syu
    yes '' | $(append_sudo) pacman -S $@
}

install_with_apt() {
    # args: packages
    check_wheel
    if [ $? -ne 0 ]; then
        echo "Skip installing with apt."
        return 0
    fi
    $(append_sudo) apt update  -y
    $(append_sudo) apt upgrade -y
    $(append_sudo) apt install -y $@
}

install_with_pkg() {
    # args: packages
    pkg upgrade -y
    pkg install -y $@
}

install_with_yay() {
    [ "$(whoami)" = "root" ] && return 0
    yes '' | yay -S $@
}

install_with_brew() {
    brew install -y $@
}

install_with_snap() {
    snap install -y $@
}

get_package_list() {
    [ -f $PKGLIST ] && return 0

    [ -d $HOME/etc ] || mkdir $HOME/etc
    dl_file https://raw.githubusercontent.com/dooteeen/setup/master/packages.list $PKGLIST
    return $?
}

get_packages() {
    # arg 1: package manager name
    grep -E "^[^#_].+,$1,[^#]+$" $PKGLIST \
        | sed -r "s/^.*,$1,([^#]+)$/\1/"  \
        | xargs
}

exec_hooks() {
    grep -E "^$1_.*() {$" ${BASH_SOURCE[0]} \
        | sed 's/() {//g'    \
        | xargs -I % bash -c %
}

install_brew() {
    # see:
    # - https://brew.sh/
    # - https://docs.brew.sh/Homebrew-on-Linux
    executable brew && return 0

    case "$(detect_os)" in
        "ubuntu")
            $(append_sudo) apt update  -y
            $(append_sudo) apt upgrade -y
            $(append_sudo) apt install -y build-essential curl file git
            ;;
        "centos")
            $(append_sudo) yum groupinstall 'Development Tools'
            $(append_sudo) yum install curl file git
            ;;
        "*")
            echo "Note: No need to install brew on $(detect_os)"
            return 0
            ;;
    esac

    BREW_SCRIPT='https://raw.githubusercontent.com/Homebrew/install/master/install.sh'
    /bin/bash -c "$(curl -fsSL $BREW_SCRIPT)"

    BREW_DIR=
    [ -d $HOME/.linuxbrew ] \
        && BREW_DIR="$HOME/.linuxbrew"
    [ -d /home/linuxbrew/.linuxbrew ] \
        && BREW_DIR="/home/linuxbrew/.linuxbrew"

    eval $($BREW_DIR/bin/brew shellenv)
    eval $(brew shellenv --prefix) > $HOME/.init_brew.sh
    [ -r $HOME/.bash_profile ] \
        && echo "source $HOME/.init_brew.sh" >> $HOME/.bash_profile
    echo "source $HOME/.init_brew.sh" >> $HOME/.profile
}

post_hook_fish() {
    mkdir -p $HOME/.config/fish/functions
    mkdir -p $HOME/.config/fish/completions
    ln -sf $DOTFILES/fish/config.fish $HOME/.config/fish/config.fish
    ln -sf $DOTFILES/fish/fishfile    $HOME/.config/fishfile
    echo "#!$(which fish)" $HOME/.fish_local

    case "$(detect_os_base)" in
        "ANDROID")
            chsh -s $(which fish)
            ;;
        "DEBIAN")
            chsh -s $(which fish)
            [ "$(whoami)" = "root" ] || sudo chsh -s $(which fish)
            ;;
    esac
}

pre_hook_git() {
    [ -f $HOME/.gitconfig ] && return 0

    echo "Input your git name/email:"
    read n
    read e

    echo "Make ~/.gitconfig"
    echo "[user]\nname = $n\nemail = $e" > $HOME/.gitconfig
}

post_hook_git() {
    grep -q "$HOME/git/gitconfig" $HOME/.gitconfig && return 0
    echo "\n[include]\npath = $DOTFILES/git/gitconfig" >> $HOME/.gitconfig
}

post_hook_intellij() {
    [ "$(detect_os_base)" = "ARCH" ] || return 0
    ln -sf $DOTFILES/intellij/ideavimrc $HOME/.ideavimrc
}

pre_hook_pacman() {
    [ "$(detect_os_base)" = "arch" ] || return 0
    check_wheel || return 0

    $(append_sudo) sed -i -e 's/^#Color/Color/' /etc/pacman.conf
}

install_snap() {
    executable snap && return 0
    case "$(detect_os_base)" in
        "DEBIAN")
            $(append_sudo) apt install -y snapd
            ;;
    esac
}

pre_hook_sudo() {
    #sed 's/\(Defaults env_reset\)$/\1\nDefaults timestamp_timeout=300/' /etc/sudoers

    export EDITOR=vi
    if executable xsel; then
        echo "Defaults timestamp_timeout=300" | xsel --clipboard --input
        if executable vim && vim --version | grep -q '+clipboard'; then
            export EDITOR=vim
        fi
    fi

    echo "Edit /etc/sudoers:"
    echo "  Defaults timestamp_timeout=300"
    echo "press Enter to open visudo."
    read _void
    sudo -E visudo
}

post_hook_tig() {
    ln -sf $DOTFILES/git/tigrc $HOME/.tigrc
}

post_hook_tmux() {
    ln -sf $DOTFILES/tmux/tmux.conf $HOME/.tmux.conf
}

post_hook_vim() {
    grep -q "source $DOTFILES/vim/vimrc" $HOME/.vimrc && return 0
    echo "source $DOTFILES/vim/vimrc"  >> $HOME/.vimrc
    echo "source $DOTFILES/vim/gvimrc" >> $HOME/.gvimrc
}

post_hook_vscode() {
    executable code || return 1

    CODE=$HOME/.config/Code
    [ -d $CODE ] || mkdir -p $CODE

    ln -sf $DOTFILES/vscode $CODE/User

    cat $DOTFILES/vscode/extensions.txt \
        | xargs -I % code --install-extension %
}

install_yay() {
    [ "$(detect_os_base)" = "ARCH" ] || return 1
    executable yay && return 0

    check_dependencies git || $(append_sudo) pacman -S git

    HERE=$(pwd)

    cd /opt
    $(append_sudo) git clone https://aur.archlinux.org/yay.git
    [ "$(whoami)" = "root" ] || sudo chown -R $(whoami):$(whoami) ./yay
    cd yay
    yes "" | makepkg -si

    cd $HERE
}

export -f pre_hook_git
export -f pre_hook_pacman
export -f pre_hook_sudo
export -f post_hook_fish
export -f post_hook_git
export -f post_hook_intellij
export -f post_hook_tig
export -f post_hook_tmux
export -f post_hook_vim
export -f post_hook_vscode

pre_hooks() {
    exec_hooks 'pre_hook'
}

install_essentials() {
    [ -f $PKGLIST ] || get_package_list

    install_packages_with $(os_package_manager)
}

install_extras() {
    [ -f $PKGLIST ] || get_package_list

    for cmd in $(extra_package_managers); do
        if executable $cmd; then
            install_packages_with $cmd
        fi
    done
}

clone_dotfiles() {
    [ -d $DOTFILES ] && return 0
    check_dependencies git || return 1

    HERE=$(pwd)

    echo "Install dotfiles"
    mkdir $HOME/.config 2>/dev/null
    git clone https://github.com/dooteeen/dotfiles $DOTFILES
    if [ $? -ne 0]; then
        echo "Error: failed to clone dotfiles."
        return 1
    fi

    cd $DOTFILES
    git remote set-url origin git@github.com:dooteeen/dotfiles.git
    cd $HERE
}

post_hooks() {
    exec_hooks 'post_hook'
}

# main scripts:

check_dependencies sed || exit 1
check_dependencies tr  || exit 1
pre_hooks
clone_dotfiles
post_hooks
