#!/bin/bash
PKGLSIT=$HOME/etc/install_packages.list
DOTFILES=$HOME/.config/dotfiles

check_dependencies() {
    # arg 1: command name
    if which $1 >/dev/null 2>&1; then
        return 0
    else
        echo "Error: require $1"
        return 1
    fi
}

append_sudo() {
    [ "$(whoami)" = 'root' ] || echo -n 'sudo'
}

dl_file() {
    if which curl >/dev/null 2>&1; then
        curl $1 -o $2
        return $?
    fi

    if which wget >/dev/null 2>&1; then
        wget $1 -O $2
        return $?
    fi
    
    echo "Error: any downloader has not exist."
    return 1
}

detect_os() {
    [ -e /data/data/com.termux/files/home ]
        \ && echo "ANDROID"
        \ || sed -n 's/^ID=\(.*\)$/\1/p' /etc/os-release
}

detect_os_base() {
    [ -e /data/data/com.termux/files/home ]
        \ && echo "ANDROID"
        \ || sed -n 's/^ID_LIKE=\(.*\)$/\1/p' /etc/os-release
}

os_package_manager() {
    case "$(detect_os_base)" in
        "ARCH")
            printf 'pacman'
            ;;
        "DEBIAN")
            printf 'apt'
            ;;
        "ANDROID")
            printf 'pkg'
            ;;
        "*")
            return
            ;;
    esac
}

install_with_pacman() {
    # args: packages
    yes '' | $(append_sudo) pacman -Syu
    yes '' | $(append_sudo) pacman -S $@
}

install_with_apt() {
    # args: packages
    $(append_sudo) apt update  -y
    $(append_sudo) apt upgrade -y
    $(append_sudo) apt install -y $@
}

install_with_pkg() {
    # args: packages
    pkg upgrade -y
    pkg install -y $@
}

install_with_yay() {
    [ "$(whoami)" = "root" ] && return
    yes '' | yay -S $@
}

install_with_snap() {
    snap install -y $@
}

get_package_list() {
    [ -f $PKGLSIT ] && return 0
    check_dependencies wget || return 1

    [ -d $HOME/etc ] || mkdir $HOME/etc
    dl_file https://raw.githubusercontent.com/dooteeen/setup/master/install_packages $PKGLSIT
    return $?
}

get_packages() {
    # arg 1: package manager name
    grep -E "^[^#_].+,$1,[^#]+$" $PKGLSIT
        \ | sed -r "s/^.*,$1,([^#]+)$/\1/"
        \ | xargs
}

get_dotfiles() {
    [ -d $DOTFILES ] && return 0
    [ "$(whoami)" = "root" ] && return 1

    check_dependencies git || return 1
    make_gitconfig
    HERE=$(pwd)

    echo "Install dotfiles"
    mkdir $HOME/.config

    git clone https://github.com/dooteeen/dotfiles $DOTFILES
    cd $DOTFILES
    git remote add origin git@github.com:dooteeen/dotfiles.git

    cd $HERE
}

install_brew() {
    # see:
    # - https://brew.sh/
    # - https://docs.brew.sh/Homebrew-on-Linux

    case "$(detect_os)" in
        "ubuntu")
            $(append_sudo) apt update  -y
            $(append_sudo) apt upgrade -y
            $(append_sudo) apt install -y build-essential curl file git
            ;;
        "centos")
            $(append_sudo) yum groupinstall 'Development Tools'
            $(append_sudo) yum install curl file git
        "*")
            echo "Note: No need to install brew on $(detect_os)"
            return 0
            ;;
    esac

    BREW_SCRIPT='https://raw.githubusercontent.com/Homebrew/install/master/install.sh'
    /bin/bash -c "$(curl -fsSL $BREW_SCRIPT)"

    BREW_DIR=
    [ -d $HOME/.linuxbrew ] 
        \ && BREW_DIR="$HOME/.linuxbrew"
    [ -d /home/linuxbrew/.linuxbrew ] 
        \ && BREW_DIR="/home/linuxbrew/.linuxbrew"

    eval $($BREW_DIR/bin/brew shellenv)
    eval $(brew shellenv --prefix) > $HOME/.init_brew.sh
    [ -r $HOME/.bash_profile ]
        \ &&  echo "source $HOME/.init_brew.sh" >> $HOME/.bash_profile
    echo "source $HOME/.init_brew.sh" >> $HOME/.profile
}

install_hook_fish() {
    mkdir -p $HOME/.config/fish/functions
}

deploy_hook_fish() {
    ln -sf $DOTFILES/fish/config.fish $HOME/.config/fish/config.fish
    ln -sf $DOTFILES/fish/fishfile    $HOME/.config/fishfile
}

install_hook_git() {
    [ -f $HOME/.gitconfig ] && return 0

    echo "Input your git name/email:"
    read n
    read e

    echo "Make ~/.gitconfig"
    echo "[user]\nname = $n\nemail = $e" > $HOME/.gitconfig
}

deploy_hook_git() {
    echo "\n[include]\npath = $DOTFILES/git/gitconfig"
}

deploy_hook_tig() {
    ln -sf $DOTFILES/git/tig $HOME/.tigrc
}

deploy_hook_tmux() {
    ln -sf $DOTFILES/tmux/tmux.conf $HOME/.tmux.conf
}

deploy_hook_vim() {
    echo "source $DOTFILES/vim/vimrc"  >> $HOME/.vimrc
    echo "source $DOTFILES/vim/gvimrc" >> $HOME/.gvimrc
}

